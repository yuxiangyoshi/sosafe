/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sosafe.runningpages;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import sosafe.Admin;
import sosafe.Room;

/**
 *
 * @author yuxia
 */
public class Configuration extends javax.swing.JFrame {
    private Admin admin;
    private Room cur;
    private int row;
    private int col;
    /**
     * Creates new form Configuration
     */
    public Configuration(Admin ad, int i, int j) {
        admin = ad;
        row = i;
        col = j;
        initComponents();
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        Room[][] rooms = admin.getRooms();
        cur = rooms[i][j];
        if(cur.FireSensorInstalled() && cur.FireSensorOn()){
            fireCheck.setSelected(true);
        }
        if(cur.MotionSensorInstalled() && cur.motionSensorOn()){
            motionCheck.setSelected(true);
        }
        //init comboboxes
        for (int x = 0; x < 24; x++){
            onHourCombo.addItem("" + x);
            offHourCombo.addItem("" + x);
        };
        
        for (int y = 0; y < 60; y++){
            onMinCombo.addItem("" + y);
            offMinCombo.addItem("" + y);
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        motionCheck = new javax.swing.JCheckBox();
        fireCheck = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        onHourCombo = new javax.swing.JComboBox<>();
        onMinCombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        offHourCombo = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        offMinCombo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        confirmButton = new javax.swing.JButton();
        stypeCombo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        motionCheck.setText("Motion Sensor On");

        fireCheck.setText("Fire Sensor On");

        jLabel1.setText("Set Schedule For");

        jLabel2.setText("Turn on time: ");

        jLabel3.setText("Turn off time:");

        onHourCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        onMinCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel4.setText("Hour");

        jLabel5.setText("Hour");

        offHourCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel6.setText("Min");

        offMinCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel7.setText("Min");

        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        stypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fire Sensor", "Motion Sensor" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(motionCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(46, 46, 46)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(stypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(93, 93, 93))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(fireCheck)
                                .addGap(60, 60, 60))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(offHourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(onHourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(44, 44, 44))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(onMinCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(offMinCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(51, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fireCheck)
                    .addComponent(motionCheck))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(stypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(onHourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(onMinCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(offHourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(offMinCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(confirmButton)
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        //invalid click if not all comboboxes unselected, and one of them is selected
        if(!(offHourCombo.getSelectedIndex() == 0 && offMinCombo.getSelectedIndex() == 0 && onHourCombo.getSelectedIndex() == 0 && onMinCombo.getSelectedIndex() == 0)
                && (offHourCombo.getSelectedIndex() == 0 || offMinCombo.getSelectedIndex() == 0 || onHourCombo.getSelectedIndex() == 0 || onMinCombo.getSelectedIndex() == 0)){
            JOptionPane.showMessageDialog(this, "Please set a valid schedule or leave unselected");
        } else {
            if(fireCheck.isSelected()){
                cur.turnOnFireS();
            } else {
                cur.turnOffFireS();
            }
            
            if(motionCheck.isSelected()){
                cur.turnOnMotionS();
            } else {
                cur.turnOffMotionS();
            }
            
            //set timer tasks
            if(offHourCombo.getSelectedIndex() != 0){
                try {
                    SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
                    String startTime = "08/06/2017 " + (String)onHourCombo.getSelectedItem() + ":" + (String)onMinCombo.getSelectedItem() + ":00";
                    String endTime = "08/06/2017 " + (String)offHourCombo.getSelectedItem() + ":" + (String)offMinCombo.getSelectedItem() + ":00";
                    System.out.println("Start: " + startTime);
                    System.out.println("End: " + endTime);
                    Date fromDate = dateFormat.parse(startTime);
                    Date endDate = dateFormat.parse(endTime);
                    TimerTask startTask;
                    TimerTask endTask;
                    
                    if (stypeCombo.getSelectedIndex() == 0){ // fire sensor
                        if (admin.getFireScheduled()){
                            admin.getFireOnTask()[row][col].cancel();
                            admin.getFireOffTask()[row][col].cancel();
                        }
                        startTask = new TimerTask() {
                            @Override
                            public void run() {
                                admin.getRooms()[row][col].turnOnFireS();
                                System.out.println("Fire Sensor turned on");
                            }
                        };
                        
                        
                        endTask = new TimerTask() {
                            @Override
                            public void run() {
                                admin.getRooms()[row][col].turnOffFireS();
                                System.out.println("Fire Sensor turned off");
                            }
                        };
                        
                        admin.getTimer().scheduleAtFixedRate(startTask, fromDate, 2*60*1000);
                        admin.getTimer().scheduleAtFixedRate(endTask, endDate, 2*60*1000);
                        admin.getFireOnTask()[row][col] = startTask;
                        admin.getFireOffTask()[row][col] = endTask;
                        
                        
                    } else { // motion sensor
                        if(admin.getMotionScheduled()){
                            admin.getMotionOnTask()[row][col].cancel();
                            admin.getMotionOffTask()[row][col].cancel();
                        }
                        startTask = new TimerTask() {
                            @Override
                            public void run() {
                                admin.getRooms()[row][col].turnOnMotionS();
                                System.out.println("Motion Sensor turned on");
                            }
                        };
                        
                        
                        endTask = new TimerTask() {
                            @Override
                            public void run() {
                                admin.getRooms()[row][col].turnOffMotionS();
                                System.out.println("Motion Sensor turned off");
                            }
                        };
                        
                        admin.getTimer().scheduleAtFixedRate(startTask, fromDate, 2*60*1000);
                        admin.getTimer().scheduleAtFixedRate(endTask, endDate, 2*60*1000);
                        admin.getMotionOnTask()[row][col] = startTask;
                        admin.getMotionOffTask()[row][col] = endTask;
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(Configuration.class.getName()).log(Level.SEVERE, null, ex);
                }                
            } else { //cancel turn On and Off tasks for selected type
                if (stypeCombo.getSelectedIndex() == 0){ //fire sensor
                    admin.getFireOnTask()[row][col].cancel();
                    admin.getFireOffTask()[row][col].cancel();
                } else {
                    admin.getMotionOnTask()[row][col].cancel();
                    admin.getMotionOffTask()[row][col].cancel();
                }
            }
            this.dispose();
        }
        
    }//GEN-LAST:event_confirmButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Configuration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Configuration(new Admin(5,5), 1, 1).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton confirmButton;
    private javax.swing.JCheckBox fireCheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JCheckBox motionCheck;
    private javax.swing.JComboBox<String> offHourCombo;
    private javax.swing.JComboBox<String> offMinCombo;
    private javax.swing.JComboBox<String> onHourCombo;
    private javax.swing.JComboBox<String> onMinCombo;
    private javax.swing.JComboBox<String> stypeCombo;
    // End of variables declaration//GEN-END:variables
}
